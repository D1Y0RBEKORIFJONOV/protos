// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: teacher/teacher.proto

package teacher17

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TeacherService_CreateTeacher_FullMethodName  = "/TeacherService/CreateTeacher"
	TeacherService_GetAllTeacher_FullMethodName  = "/TeacherService/GetAllTeacher"
	TeacherService_GetTeacherById_FullMethodName = "/TeacherService/GetTeacherById"
	TeacherService_UpdateTeacher_FullMethodName  = "/TeacherService/UpdateTeacher"
)

// TeacherServiceClient is the client API for TeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeacherServiceClient interface {
	CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*CreateTeacherResponse, error)
	GetAllTeacher(ctx context.Context, in *GetAllTeachersRequest, opts ...grpc.CallOption) (*GetAllTeachersResponse, error)
	GetTeacherById(ctx context.Context, in *GetTeacherByIdRequest, opts ...grpc.CallOption) (*Teacher, error)
	UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...grpc.CallOption) (*Teacher, error)
}

type teacherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherServiceClient(cc grpc.ClientConnInterface) TeacherServiceClient {
	return &teacherServiceClient{cc}
}

func (c *teacherServiceClient) CreateTeacher(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*CreateTeacherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTeacherResponse)
	err := c.cc.Invoke(ctx, TeacherService_CreateTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) GetAllTeacher(ctx context.Context, in *GetAllTeachersRequest, opts ...grpc.CallOption) (*GetAllTeachersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTeachersResponse)
	err := c.cc.Invoke(ctx, TeacherService_GetAllTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) GetTeacherById(ctx context.Context, in *GetTeacherByIdRequest, opts ...grpc.CallOption) (*Teacher, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Teacher)
	err := c.cc.Invoke(ctx, TeacherService_GetTeacherById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) UpdateTeacher(ctx context.Context, in *UpdateTeacherRequest, opts ...grpc.CallOption) (*Teacher, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Teacher)
	err := c.cc.Invoke(ctx, TeacherService_UpdateTeacher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServiceServer is the server API for TeacherService service.
// All implementations must embed UnimplementedTeacherServiceServer
// for forward compatibility
type TeacherServiceServer interface {
	CreateTeacher(context.Context, *CreateTeacherRequest) (*CreateTeacherResponse, error)
	GetAllTeacher(context.Context, *GetAllTeachersRequest) (*GetAllTeachersResponse, error)
	GetTeacherById(context.Context, *GetTeacherByIdRequest) (*Teacher, error)
	UpdateTeacher(context.Context, *UpdateTeacherRequest) (*Teacher, error)
	mustEmbedUnimplementedTeacherServiceServer()
}

// UnimplementedTeacherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeacherServiceServer struct {
}

func (UnimplementedTeacherServiceServer) CreateTeacher(context.Context, *CreateTeacherRequest) (*CreateTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) GetAllTeacher(context.Context, *GetAllTeachersRequest) (*GetAllTeachersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) GetTeacherById(context.Context, *GetTeacherByIdRequest) (*Teacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacherById not implemented")
}
func (UnimplementedTeacherServiceServer) UpdateTeacher(context.Context, *UpdateTeacherRequest) (*Teacher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) mustEmbedUnimplementedTeacherServiceServer() {}

// UnsafeTeacherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherServiceServer will
// result in compilation errors.
type UnsafeTeacherServiceServer interface {
	mustEmbedUnimplementedTeacherServiceServer()
}

func RegisterTeacherServiceServer(s grpc.ServiceRegistrar, srv TeacherServiceServer) {
	s.RegisterService(&TeacherService_ServiceDesc, srv)
}

func _TeacherService_CreateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).CreateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_CreateTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).CreateTeacher(ctx, req.(*CreateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_GetAllTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTeachersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).GetAllTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_GetAllTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).GetAllTeacher(ctx, req.(*GetAllTeachersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_GetTeacherById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).GetTeacherById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_GetTeacherById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).GetTeacherById(ctx, req.(*GetTeacherByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_UpdateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).UpdateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeacherService_UpdateTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).UpdateTeacher(ctx, req.(*UpdateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeacherService_ServiceDesc is the grpc.ServiceDesc for TeacherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeacherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TeacherService",
	HandlerType: (*TeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeacher",
			Handler:    _TeacherService_CreateTeacher_Handler,
		},
		{
			MethodName: "GetAllTeacher",
			Handler:    _TeacherService_GetAllTeacher_Handler,
		},
		{
			MethodName: "GetTeacherById",
			Handler:    _TeacherService_GetTeacherById_Handler,
		},
		{
			MethodName: "UpdateTeacher",
			Handler:    _TeacherService_UpdateTeacher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teacher/teacher.proto",
}
